# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  before_all do
    setup_circle_ci
  end
  
  desc "Create new version"
  lane :create_new_version do |options|
    new_version = options[:v]
    fail ArgumentError, "missing version" unless new_version
    previous_version =  get_version_number(target: "Revenuex")
    increment_version_number(version_number: new_version)
    files = [
      '../RevenueX.podspec',
    ]
    for file in files
      sed_regex = 's|' + previous_version + '|' + new_version + '|'
      backup_extension = '.bck'
      sh("sed", '-i', backup_extension, sed_regex, file)
    end
  end

  desc "Checks before deployment"
  lane :check_before_deploy do |options|
    current_version = get_version_number(target: "Revenuex")
    check_if_git_tag_exists(current_version)
    check_if_github_release_exists(current_version)
    pod_lib_lint(verbose: true, podspec:'RevenueX.podspec')
    export_xcframework
  end


  desc "Deploy"
  lane :deploy do |options|
    version = get_version_number(target: "Revenuex")
    pod_push(path: "RevenueX.podspec")
    export_xcframework
    github_release(version: version)
  end

  desc "Prepare next version"
  lane :prepare_next do |options|

    current_version_number = get_version_number(target: "Revenuex")
    major, minor, _ = current_version_number.split('.')
    next_version = "#{major}.#{minor.to_i + 1}.0"
    
    next_version_copy = "#{next_version}-copy"

    branch = "next/#{next_version_copy}"
    sh("git", "checkout", "-b", branch)

    create_new_version(v: next_version_copy)

    sh("git", "commit", "-am", "Preparing next")
    push_to_git_remote(
      local_branch:branch,
      remote_branch:"branch
    )

    puts "Current Version: #{current_version_number}"
    puts "New branch: #{branch}"

    create_pull_request(
      repo: "revenue-plus/revenuex-ios-sdk",
      title: "Next version: #{next_version_copy}",
      head: branch,
      base: "develop",
      api_token: ENV["GITHUB_TOKEN"]
    )
  end


  desc "Make github release"
  lane :github_release do |options|
    release_version = options[:version]
    fail ArgumentError, "missing version" unless release_version

    begin
      changelog = File.read("../CHANGELOG.latest.md")
    rescue
      fail "please add a CHANGELOG.latest.md file before calling this lane"
    end

    set_github_release(
      repository_name: "revenue-plus/revenuex-ios-sdk",
      api_token: ENV["GITHUB_TOKEN"],
      name: release_version,
      tag_name: "#{release_version}",
      description: changelog,
      commitish: "develop",
      upload_assets: ["Revenuex.xcframework.zip"],
      is_draft: false
  )
  end

  desc "Export XCFramework"
  lane :export_xcframework do |options|
    output_directory = 'build/xcframeworks'
    platforms = [
        'iOS'
      ]

    create_xcframework(
      destinations: platforms,
      scheme: 'Revenuex',
      xcframework_output_directory: output_directory,
      enable_bitcode: false
    )
    # sh runs from the Fastfile's location, but other commands run from the project root.
    output_directory_for_sh = "../#{output_directory}"

    xcframeworks_zip_path_for_sh = "../Revenuex.xcframework.zip"
    sh("ditto", "-c", "-k", "--sequesterRsrc", "--keepParent", 
      output_directory_for_sh, 
      xcframeworks_zip_path_for_sh)

  end

  desc "Increment build number and update changelog"
  lane :bump_and_update_changelog do |options|
    create_new_version(options)
    attach_changelog_to_master(options[:version])
  end

end

def attach_changelog_to_master(version)
  current_changelog = File.open("../CHANGELOG.latest.md", 'r')
  master_changelog = File.open("../CHANGELOG.md", 'r')

  current_changelog_data = current_changelog.read
  master_changelog_data = master_changelog.read

  current_changelog.close  
  master_changelog.close

  File.open("../CHANGELOG.md", 'w') { |master_changelog_write_mode|
    version_header = "## #{version}"
    whole_file_data = "#{version_header}\n#{current_changelog_data}\n#{master_changelog_data}"
    puts "going to save. Contents - #{whole_file_data}"
    
    master_changelog_write_mode.write(whole_file_data)
  }
end

def check_if_git_tag_exists(version)
  if git_tag_exists(tag: version, remote: true, remote_name: 'origin')
    raise "git tag with version #{version} already exists!"
  end
end

def check_if_github_release_exists(version)
  release_number = get_github_release(url: "revenuecat/purchases-ios", version: version)
  raise "#{version} already exists!" unless release_number.nil?
end

